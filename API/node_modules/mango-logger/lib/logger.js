const fs = require('fs');
const {
  SAVETOFILE,
  SAVETOFILEDATE,
  LOGSTRINGBUILDER
} = require('./helper')

const ROOTDIR = './logs';

class Logger {
  /**
   * 
   * @param {Object} options root: directory, saveFormat: string
   */
  constructor(options = null) {
    this.options = {
      root: ROOTDIR,
      saveToFile: SAVETOFILE
    }
    if (options) {
      if (typeof options !== 'object')
        throw new TypeError('argument options must be a object')
      if (options.root) {
        if (typeof options.root !== 'string')
          throw new TypeError('argument title must be a string')
        this.options.root = options.root
      }
      if (options.saveFormat) {
        if (typeof options.saveFormat !== 'string')
          throw new TypeError('argument title must be a string')
        else {
          if (options.saveFormat.toLocaleLowerCase() === 'date')
            this.options.saveToFile = SAVETOFILEDATE
          else if (options.saveFormat.toLocaleLowerCase() === 'single')
            this.options.saveToFile = SAVETOFILE
          else
            this.options.saveToFile = SAVETOFILE
        }
      }
    }

    if (!fs.existsSync(this.options.root)) {
      fs.mkdirSync(this.options.root);
    }
  }
  /**
   * log your data to file
   * @param {String} title create folder to save log to a directory
   * @param {String} type type for separating log
   * @param {String|Object} message what you need to log
   */
  toFile(title, type, message) {
    if (typeof title !== 'string')
      throw new TypeError('argument title must be a string')
    if (typeof type !== 'string')
      throw new TypeError('argument type must be a string')
    this.options.saveToFile(this.options.root, title, LOGSTRINGBUILDER(type, message))
  }
  /**
   * log your error to file
   * @param {String} title create folder to save log to a directory
   * @param {String} error your error
   */
  errorToFile(title, error) {
    if (typeof title !== 'string')
      throw new TypeError('argument title must be a string')
    this.options.saveToFile(this.options.root, title, LOGSTRINGBUILDER('error', error))
  }
  /**
   * log your object to file
   * @param {String} title create folder to save log to a directory
   * @param {String} type type for separating log
   * @param {Object} obj your object you want to log
   */
  objToFile(title, type, obj) {
    if (typeof title !== 'string')
      throw new TypeError('argument title must be a string')
    if (typeof type !== 'string')
      throw new TypeError('argument type must be a string')
    this.options.saveToFile(this.options.root, title, LOGSTRINGBUILDER(type, JSON.stringify(obj)))
  }
}

module.exports = Logger;